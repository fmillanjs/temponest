# ============================================
# TempoNest - Simplified Development Environment
# ============================================
#
# This version excludes Plausible Analytics for faster startup
# and better stability on constrained environments.
#
# Includes: PostgreSQL, Redis, MailHog, MinIO
# ============================================

services:
  # ============================================
  # PostgreSQL - Main Database
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: temponest-postgres
    restart: unless-stopped
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: temponest
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - temponest-network

  # ============================================
  # Redis - Cache & Job Queue
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: temponest-redis
    restart: unless-stopped
    ports:
      - '6380:6379'
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - temponest-network

  # ============================================
  # MailHog - Email Testing
  # ============================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: temponest-mailhog
    restart: unless-stopped
    ports:
      - '1025:1025' # SMTP
      - '8025:8025' # Web UI
    networks:
      - temponest-network

  # ============================================
  # MinIO - S3-Compatible Object Storage
  # ============================================
  minio:
    image: minio/minio:latest
    container_name: temponest-minio
    restart: unless-stopped
    ports:
      - '9000:9000' # API
      - '9001:9001' # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - temponest-network

  # ============================================
  # MinIO Client - Create default bucket
  # ============================================
  minio-create-bucket:
    image: minio/mc:latest
    container_name: temponest-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/temponest || true;
      /usr/bin/mc anonymous set public myminio/temponest;
      exit 0;
      "
    networks:
      - temponest-network

# ============================================
# Volumes
# ============================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  temponest-network:
    driver: bridge

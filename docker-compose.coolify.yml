version: '3.8'

# ============================================
# Complete SaaS Automation Platform for Coolify
# ============================================

services:
  # ============================================
  # n8n Workflow Automation
  # ============================================
  n8n:
    image: n8nio/n8n:latest
    container_name: saas-n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=${N8N_HOST:-n8n.localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - WEBHOOK_URL=https://${N8N_HOST:-n8n.localhost}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${DB_N8N_PASSWORD}
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true
      - GENERIC_TIMEZONE=${TZ:-America/New_York}
    volumes:
      - n8n-data:/home/node/.n8n
      - ./workflows:/workflows:ro
    networks:
      - saas-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST:-n8n.localhost}`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "coolify.managed=true"

  # ============================================
  # API Gateway
  # ============================================
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: saas-api
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - DATABASE_URL=postgresql://saas:${DB_PASSWORD}@postgres:5432/saasdb
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_ORG=${GITHUB_ORG}
      - COOLIFY_API_TOKEN=${COOLIFY_API_TOKEN}
      - COOLIFY_INSTANCE_URL=${COOLIFY_INSTANCE_URL:-http://host.docker.internal:3000}
      - DOMAIN=${DOMAIN}
    volumes:
      - ./services/api:/app
      - api-logs:/app/logs
    networks:
      - saas-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_HOST:-api.localhost}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3001"
      - "coolify.managed=true"

  # ============================================
  # Dashboard (Admin Panel)
  # ============================================
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: saas-dashboard
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=https://${API_HOST:-api.localhost}
      - NEXT_PUBLIC_APP_URL=https://${DASHBOARD_HOST:-dashboard.localhost}
      - DATABASE_URL=postgresql://saas:${DB_PASSWORD}@postgres:5432/saasdb
      - NEXTAUTH_URL=https://${DASHBOARD_HOST:-dashboard.localhost}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./services/dashboard:/app
    networks:
      - saas-network
    depends_on:
      - api
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${DASHBOARD_HOST:-dashboard.localhost}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3000"
      - "coolify.managed=true"

  # ============================================
  # Builder Service (Project Generator)
  # ============================================
  builder:
    build:
      context: ./services/builder
      dockerfile: Dockerfile
    container_name: saas-builder
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3002
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_ORG=${GITHUB_ORG}
      - COOLIFY_API_TOKEN=${COOLIFY_API_TOKEN}
      - COOLIFY_INSTANCE_URL=${COOLIFY_INSTANCE_URL:-http://host.docker.internal:3000}
      - TEMPLATES_PATH=/templates
    volumes:
      - ./services/builder:/app
      - ./templates:/templates:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - saas-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "coolify.managed=true"

  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: saas-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_ROOT_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=saasdb,n8n
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/create-databases.sh:/docker-entrypoint-initdb.d/02-create-databases.sh
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - "coolify.managed=true"

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: saas-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    labels:
      - "coolify.managed=true"

  # ============================================
  # MinIO (S3-Compatible Storage)
  # ============================================
  minio:
    image: minio/minio:latest
    container_name: saas-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=https://${MINIO_HOST:-minio.localhost}
    volumes:
      - minio-data:/data
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_HOST:-minio.localhost}`)"
      - "traefik.http.routers.minio.tls=true"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"
      - "coolify.managed=true"

volumes:
  n8n-data:
  postgres-data:
  redis-data:
  minio-data:
  api-logs:

networks:
  saas-network:
    driver: bridge
    labels:
      - "coolify.managed=true"
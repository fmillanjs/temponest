// ============================================
// TempoNest Database Schema
// ============================================
//
// Value Propositions:
// - Multi-tenant data isolation
// - Complete audit trail for compliance
// - Scalable subscription management
// - Flexible project/template system
// - Type-safe database access
//
// Principles Applied:
// - Scalability: Indexed queries, efficient relations
// - Security: Row-level tenant isolation
// - Observability: Audit logs on all entities
// - Extensibility: JSON metadata fields for future features
// ============================================

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth fields
  accounts      Account[]
  sessions      Session[]

  // Organization membership
  memberships   OrganizationMember[]

  // Owned organizations
  ownedOrganizations Organization[] @relation("OrganizationOwner")

  // Activity tracking
  activities    Activity[]

  // API keys
  apiKeys       ApiKey[]

  @@index([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// ORGANIZATION & TEAM MANAGEMENT
// ============================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  website     String?
  ownerId     String

  // Subscription details
  plan                String   @default("free") // free, starter, pro, enterprise
  subscriptionStatus  String   @default("active") // active, past_due, canceled, incomplete
  stripeCustomerId    String?  @unique
  stripeSubscriptionId String? @unique

  // Feature limits (based on plan)
  limits      Json     @default("{\"projects\": 1, \"templates\": 3, \"members\": 3, \"deployments\": 10}")

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members     OrganizationMember[]
  projects    Project[]
  templates   Template[]
  apiKeys     ApiKey[]
  webhooks    Webhook[]
  activities  Activity[]

  @@index([slug])
  @@index([ownerId])
  @@index([stripeCustomerId])
  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           String   @default("member") // owner, admin, member, viewer

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_members")
}

// ============================================
// API KEYS & AUTHENTICATION
// ============================================

model ApiKey {
  id             String   @id @default(cuid())
  name           String
  key            String   @unique
  userId         String
  organizationId String

  // Permissions
  permissions    Json     @default("[]") // Array of permission strings

  // Rate limiting
  rateLimit      Int      @default(1000) // requests per hour

  // Status
  isActive       Boolean  @default(true)
  lastUsedAt     DateTime?
  expiresAt      DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([key])
  @@index([userId])
  @@index([organizationId])
  @@map("api_keys")
}

// ============================================
// PROJECT & TEMPLATE MANAGEMENT
// ============================================

model Project {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?
  organizationId String

  // Template used
  templateId     String?

  // Repository details
  repositoryUrl  String?
  repositoryId   String?
  defaultBranch  String   @default("main")

  // Deployment details
  coolifyProjectId String?
  coolifyAppId     String?
  deployUrl        String?

  // Status
  status         String   @default("pending") // pending, creating, active, failed, suspended, deleted

  // Configuration (stored as JSON for flexibility)
  config         Json     @default("{}")
  envVariables   Json     @default("{}")

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  template       Template?    @relation(fields: [templateId], references: [id])
  deployments    Deployment[]
  activities     Activity[]

  @@index([slug])
  @@index([organizationId])
  @@index([templateId])
  @@index([status])
  @@map("projects")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  category    String   @default("saas") // saas, ecommerce, blog, api, landing

  // Creator
  organizationId String?
  isPublic       Boolean  @default(false)
  isFeatured     Boolean  @default(false)

  // Repository
  repositoryUrl  String
  repositoryRef  String   @default("main")

  // Metadata
  image          String?
  tags           String[] @default([])
  techStack      Json     @default("[]") // Array of technologies
  features       Json     @default("[]") // Array of feature descriptions

  // Configuration
  defaultConfig  Json     @default("{}")
  requiredEnvVars String[] @default([])

  // Stats
  usageCount     Int      @default(0)

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id])
  projects       Project[]

  @@index([slug])
  @@index([category])
  @@index([isPublic])
  @@index([isFeatured])
  @@map("templates")
}

// ============================================
// DEPLOYMENT MANAGEMENT
// ============================================

model Deployment {
  id              String   @id @default(cuid())
  projectId       String

  // Version info
  version         String?
  commitSha       String?
  commitMessage   String?
  branch          String   @default("main")

  // Deployment details
  coolifyDeploymentId String?
  status          String   @default("pending") // pending, building, deploying, success, failed, rolled_back
  environment     String   @default("production") // development, staging, production

  // URLs
  deployUrl       String?
  previewUrl      String?

  // Build info
  buildLog        String?  @db.Text
  buildDuration   Int?     // seconds

  // Metrics
  cpuUsage        Float?
  memoryUsage     Float?

  // Timestamps
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime @default(now())

  // Relations
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([environment])
  @@map("deployments")
}

// ============================================
// WEBHOOK & INTEGRATIONS
// ============================================

model Webhook {
  id             String   @id @default(cuid())
  organizationId String

  // Webhook details
  url            String
  secret         String
  events         String[] @default([]) // project.created, project.deployed, deployment.success, etc.

  // Status
  isActive       Boolean  @default(true)

  // Stats
  lastTriggeredAt DateTime?
  failureCount    Int      @default(0)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deliveries     WebhookDelivery[]

  @@index([organizationId])
  @@map("webhooks")
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  webhookId   String

  // Request details
  event       String
  payload     Json
  requestHeaders Json?

  // Response details
  statusCode  Int?
  responseBody String? @db.Text
  responseHeaders Json?

  // Status
  success     Boolean  @default(false)
  error       String?  @db.Text

  // Timing
  duration    Int?     // milliseconds
  attempts    Int      @default(1)

  createdAt   DateTime @default(now())

  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([event])
  @@index([success])
  @@map("webhook_deliveries")
}

// ============================================
// AUDIT & ACTIVITY LOGGING
// ============================================

model Activity {
  id             String   @id @default(cuid())
  organizationId String
  userId         String?
  projectId      String?

  // Activity details
  action         String   // project.created, deployment.triggered, member.added, etc.
  entity         String   // project, deployment, member, etc.
  entityId       String?

  // Metadata
  metadata       Json     @default("{}")

  // Request context
  ipAddress      String?
  userAgent      String?

  createdAt      DateTime @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([userId])
  @@index([projectId])
  @@index([action])
  @@index([createdAt])
  @@map("activities")
}

// ============================================
// BILLING & SUBSCRIPTION MANAGEMENT
// ============================================

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String

  // Pricing
  priceMonthly  Int    // in cents
  priceYearly   Int?   // in cents (with discount)

  // Stripe integration
  stripePriceIdMonthly String?
  stripePriceIdYearly  String?

  // Features & Limits
  limits      Json     @default("{}")
  features    Json     @default("[]")

  // Status
  isActive    Boolean  @default(true)
  isPopular   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subscription_plans")
}

model Invoice {
  id                String   @id @default(cuid())
  organizationId    String

  // Stripe details
  stripeInvoiceId   String   @unique
  stripeCustomerId  String

  // Invoice details
  amount            Int      // in cents
  currency          String   @default("usd")
  status            String   // draft, open, paid, uncollectible, void

  // Dates
  periodStart       DateTime
  periodEnd         DateTime
  paidAt            DateTime?
  dueDate           DateTime?

  // Payment
  paymentMethod     String?

  // Files
  invoiceUrl        String?
  invoicePdf        String?

  createdAt         DateTime @default(now())

  @@index([organizationId])
  @@index([stripeInvoiceId])
  @@index([status])
  @@map("invoices")
}

// ============================================
// ANALYTICS & METRICS (optional, for future)
// ============================================

model UsageMetric {
  id             String   @id @default(cuid())
  organizationId String

  // Metric details
  metricType     String   // deployments, api_calls, storage, bandwidth
  value          Float
  unit           String   // count, bytes, seconds

  // Time period
  period         DateTime // Start of the measurement period (e.g., hour, day)

  // Metadata
  metadata       Json     @default("{}")

  createdAt      DateTime @default(now())

  @@index([organizationId])
  @@index([metricType])
  @@index([period])
  @@map("usage_metrics")
}
